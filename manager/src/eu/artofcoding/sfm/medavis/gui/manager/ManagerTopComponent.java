/*
 * SFM Medavis Tool
 * Copyright (C) 2011-2012 art of coding UG (haftungsbeschr채nkt).
 *
 * Alle Rechte vorbehalten. Nutzung unterliegt Lizenzbedingungen.
 * All rights reserved. Use is subject to license terms.
 *
 */
package eu.artofcoding.sfm.medavis.gui.manager;

import eu.artofcoding.sfm.medavis.gui.helper.GuiHelper;
import java.io.File;
import javax.swing.filechooser.FileFilter;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//eu.artofcoding.sfm.medavis.gui.manager//Manager//EN", autostore = false)
@TopComponent.Description(preferredID = "ManagerTopComponent", persistenceType = TopComponent.PERSISTENCE_ALWAYS) //iconBase="SET/PATH/TO/ICON/HERE"
@TopComponent.Registration(mode = "editor", openAtStartup = true)
@ActionID(category = "Window", id = "eu.artofcoding.sfm.medavis.gui.manager.ManagerTopComponent")
@ActionReference(path = "Menu/Window") //position = 333
@TopComponent.OpenActionRegistration(displayName = "#CTL_ManagerAction", preferredID = "ManagerTopComponent")
public final class ManagerTopComponent extends TopComponent {

    private static final long serialVersionUID = 1L;
    /**
     * File filter for FileChooser.
     */
    private FileFilter csvFileFilter = new FileFilter() {

        @Override
        public boolean accept(File file) {
            if (file.isDirectory() || file.getName().endsWith(".csv")) {
                return true;
            } else {
                return false;
            }
        }

        @Override
        public String getDescription() {
            return "CSV-Datei";
        }
    };

    public ManagerTopComponent() {
        initComponents();
        myInitComponents();
        setName(NbBundle.getMessage(ManagerTopComponent.class, "CTL_ManagerTopComponent"));
        setToolTipText(NbBundle.getMessage(ManagerTopComponent.class, "HINT_ManagerTopComponent"));
        putClientProperty(TopComponent.PROP_CLOSING_DISABLED, Boolean.TRUE);
        putClientProperty(TopComponent.PROP_DRAGGING_DISABLED, Boolean.TRUE);
        putClientProperty(TopComponent.PROP_UNDOCKING_DISABLED, Boolean.TRUE);
    }

    /**
     * Init components.
     */
    private void myInitComponents() {
        medavisFileChooser.setAcceptAllFileFilterUsed(false);
        medavisFileChooser.addChoosableFileFilter(csvFileFilter);
        orbisFileChooser.setAcceptAllFileFilterUsed(false);
        orbisFileChooser.addChoosableFileFilter(csvFileFilter);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        medavisPanel = new javax.swing.JTabbedPane();
        medavisFileUploadPanel = new javax.swing.JPanel();
        medavisFileChooser = new javax.swing.JFileChooser();
        medavisFileTypeComboBox = new javax.swing.JComboBox();
        orbisPanel = new javax.swing.JPanel();
        orbisFileTypeComboBox = new javax.swing.JComboBox();
        orbisFileChooser = new javax.swing.JFileChooser();
        exportPanel = new javax.swing.JPanel();
        exportViewNameComboBox = new javax.swing.JComboBox();
        exportFileChooser = new javax.swing.JFileChooser();
        settingsPanel = new javax.swing.JPanel();
        serviceUrlLabel = new javax.swing.JLabel();
        serviceUrlTextField = new javax.swing.JTextField();
        uploadServiceUrlLabel = new javax.swing.JLabel();
        uploadServiceUrlTextField = new javax.swing.JTextField();
        exportServiceUrlLabel = new javax.swing.JLabel();
        exportServiceUrlTextField = new javax.swing.JTextField();
        databaseMaintenancePanel = new javax.swing.JPanel();
        allTablesLabel = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        medavisFileUploadPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(ManagerTopComponent.class, "ManagerTopComponent.medavisFileUploadPanel.border.title"))); // NOI18N

        medavisFileChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                medavisFileChooserActionPerformed(evt);
            }
        });

        medavisFileTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Bitte w채hlen...", "999", "145", "307", "10025", "10039", "10040" }));

        javax.swing.GroupLayout medavisFileUploadPanelLayout = new javax.swing.GroupLayout(medavisFileUploadPanel);
        medavisFileUploadPanel.setLayout(medavisFileUploadPanelLayout);
        medavisFileUploadPanelLayout.setHorizontalGroup(
            medavisFileUploadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, medavisFileUploadPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(medavisFileTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(medavisFileChooser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        medavisFileUploadPanelLayout.setVerticalGroup(
            medavisFileUploadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(medavisFileUploadPanelLayout.createSequentialGroup()
                .addGroup(medavisFileUploadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(medavisFileChooser, javax.swing.GroupLayout.DEFAULT_SIZE, 448, Short.MAX_VALUE)
                    .addGroup(medavisFileUploadPanelLayout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addComponent(medavisFileTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        medavisPanel.addTab(org.openide.util.NbBundle.getMessage(ManagerTopComponent.class, "ManagerTopComponent.medavisFileUploadPanel.TabConstraints.tabTitle"), medavisFileUploadPanel); // NOI18N

        orbisPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(ManagerTopComponent.class, "ManagerTopComponent.orbisPanel.border.title"))); // NOI18N

        orbisFileTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Bitte w채hlen...", "Leistungen", "ICPM" }));

        orbisFileChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orbisFileChooserActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout orbisPanelLayout = new javax.swing.GroupLayout(orbisPanel);
        orbisPanel.setLayout(orbisPanelLayout);
        orbisPanelLayout.setHorizontalGroup(
            orbisPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, orbisPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(orbisFileTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(orbisFileChooser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        orbisPanelLayout.setVerticalGroup(
            orbisPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(orbisPanelLayout.createSequentialGroup()
                .addGroup(orbisPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(orbisFileChooser, javax.swing.GroupLayout.DEFAULT_SIZE, 448, Short.MAX_VALUE)
                    .addGroup(orbisPanelLayout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addComponent(orbisFileTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        medavisPanel.addTab(org.openide.util.NbBundle.getMessage(ManagerTopComponent.class, "ManagerTopComponent.orbisPanel.TabConstraints.tabTitle"), orbisPanel); // NOI18N

        exportPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(ManagerTopComponent.class, "ManagerTopComponent.exportPanel.border.title"))); // NOI18N

        exportViewNameComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Bitte w채hlen...", "v_m10025_m145", "v_out_leistung", "v_out_icpm" }));

        exportFileChooser.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);
        exportFileChooser.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);
        exportFileChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportFileChooserActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout exportPanelLayout = new javax.swing.GroupLayout(exportPanel);
        exportPanel.setLayout(exportPanelLayout);
        exportPanelLayout.setHorizontalGroup(
            exportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(exportPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(exportViewNameComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(exportFileChooser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        exportPanelLayout.setVerticalGroup(
            exportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(exportPanelLayout.createSequentialGroup()
                .addGroup(exportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(exportFileChooser, javax.swing.GroupLayout.DEFAULT_SIZE, 448, Short.MAX_VALUE)
                    .addGroup(exportPanelLayout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(exportViewNameComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        medavisPanel.addTab(org.openide.util.NbBundle.getMessage(ManagerTopComponent.class, "ManagerTopComponent.exportPanel.TabConstraints.tabTitle"), exportPanel); // NOI18N

        settingsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(ManagerTopComponent.class, "ManagerTopComponent.settingsPanel.border.title"))); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(serviceUrlLabel, org.openide.util.NbBundle.getMessage(ManagerTopComponent.class, "ManagerTopComponent.serviceUrlLabel.text")); // NOI18N

        serviceUrlTextField.setText(org.openide.util.NbBundle.getMessage(ManagerTopComponent.class, "ManagerTopComponent.serviceUrlTextField.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(uploadServiceUrlLabel, org.openide.util.NbBundle.getMessage(ManagerTopComponent.class, "ManagerTopComponent.uploadServiceUrlLabel.text")); // NOI18N

        uploadServiceUrlTextField.setText(org.openide.util.NbBundle.getMessage(ManagerTopComponent.class, "ManagerTopComponent.uploadServiceUrlTextField.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(exportServiceUrlLabel, org.openide.util.NbBundle.getMessage(ManagerTopComponent.class, "ManagerTopComponent.exportServiceUrlLabel.text")); // NOI18N

        exportServiceUrlTextField.setText(org.openide.util.NbBundle.getMessage(ManagerTopComponent.class, "ManagerTopComponent.exportServiceUrlTextField.text")); // NOI18N

        databaseMaintenancePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(ManagerTopComponent.class, "ManagerTopComponent.databaseMaintenancePanel.border.title"))); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(allTablesLabel, org.openide.util.NbBundle.getMessage(ManagerTopComponent.class, "ManagerTopComponent.allTablesLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jButton1, org.openide.util.NbBundle.getMessage(ManagerTopComponent.class, "ManagerTopComponent.jButton1.text")); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout databaseMaintenancePanelLayout = new javax.swing.GroupLayout(databaseMaintenancePanel);
        databaseMaintenancePanel.setLayout(databaseMaintenancePanelLayout);
        databaseMaintenancePanelLayout.setHorizontalGroup(
            databaseMaintenancePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(databaseMaintenancePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(allTablesLabel)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        databaseMaintenancePanelLayout.setVerticalGroup(
            databaseMaintenancePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(databaseMaintenancePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(databaseMaintenancePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(allTablesLabel)
                    .addComponent(jButton1))
                .addContainerGap(121, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout settingsPanelLayout = new javax.swing.GroupLayout(settingsPanel);
        settingsPanel.setLayout(settingsPanelLayout);
        settingsPanelLayout.setHorizontalGroup(
            settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(settingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(uploadServiceUrlLabel)
                    .addComponent(serviceUrlLabel)
                    .addComponent(exportServiceUrlLabel))
                .addGap(18, 18, 18)
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(databaseMaintenancePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(serviceUrlTextField)
                    .addComponent(uploadServiceUrlTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 620, Short.MAX_VALUE)
                    .addComponent(exportServiceUrlTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 620, Short.MAX_VALUE))
                .addContainerGap())
        );
        settingsPanelLayout.setVerticalGroup(
            settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(settingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(serviceUrlLabel)
                    .addComponent(serviceUrlTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(uploadServiceUrlTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(uploadServiceUrlLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exportServiceUrlTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(exportServiceUrlLabel))
                .addGap(18, 18, 18)
                .addComponent(databaseMaintenancePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(154, Short.MAX_VALUE))
        );

        medavisPanel.addTab(org.openide.util.NbBundle.getMessage(ManagerTopComponent.class, "ManagerTopComponent.settingsPanel.TabConstraints.tabTitle"), settingsPanel); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(medavisPanel)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(medavisPanel)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void orbisFileChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orbisFileChooserActionPerformed
        File file = orbisFileChooser.getSelectedFile();
        if (null != file) {
            String type = (String) orbisFileTypeComboBox.getSelectedItem();
            boolean canUpload = false;
            if (type.startsWith("Bitte")) {
                GuiHelper.warningMessage("Hinweis", "Bitte w채hlen Sie den Typ der Datei!");
            }
            if (!file.canRead()) {
                GuiHelper.warningMessage("Hinweis", "Die Datei kann nicht gelesen werden!");
            }
            if (!type.startsWith("Bitte") && file.canRead()) {
                canUpload = true;
            }
            if (canUpload) {
                StringBuilder builder = new StringBuilder();
                builder.append(serviceUrlTextField.getText()).append(uploadServiceUrlTextField.getText()).append("?name=orbis");
                if (type.equals("Leistungen")) {
                    builder.append("lstg");
                } else {
                    builder.append(type.toLowerCase());
                }
                MedavisTaskFactory.startImportTask(file, builder.toString());
            }
        }
    }//GEN-LAST:event_orbisFileChooserActionPerformed

    private void medavisFileChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_medavisFileChooserActionPerformed
        File file = medavisFileChooser.getSelectedFile();
        if (null != file) {
            String fileType = (String) medavisFileTypeComboBox.getSelectedItem();
            boolean canUpload = false;
            if (fileType.startsWith("Bitte")) {
                GuiHelper.warningMessage("Hinweis", "Bitte w채hlen Sie den Typ der Datei!");
            }
            if (!file.canRead()) {
                GuiHelper.warningMessage("Hinweis", "Die Datei kann nicht gelesen werden!");
            }
            if (!fileType.startsWith("Bitte") && file.canRead()) {
                canUpload = true;
            }
            if (canUpload) {
                StringBuilder builder = new StringBuilder();
                builder.append(serviceUrlTextField.getText()).append(uploadServiceUrlTextField.getText()).append("?name=medavis").append(fileType.toLowerCase());
                MedavisTaskFactory.startImportTask(file, builder.toString());
            }
        }
    }//GEN-LAST:event_medavisFileChooserActionPerformed

    private void exportFileChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportFileChooserActionPerformed
        File dir = exportFileChooser.getSelectedFile();
        if (null != dir && dir.isDirectory()) {
            String viewName = (String) exportViewNameComboBox.getSelectedItem();
            boolean canUpload = false;
            if (viewName.startsWith("Bitte")) {
                GuiHelper.warningMessage("Hinweis", "Bitte w채hlen Sie den Typ der zu exportierenden Datei!");
            }
            if (!viewName.startsWith("Bitte") && dir.canWrite()) {
                canUpload = true;
            }
            if (canUpload) {
                StringBuilder builder = new StringBuilder();
                builder.append(serviceUrlTextField.getText()).append(exportServiceUrlTextField.getText()).append("?name=").append(viewName);
                File file = new File(dir, viewName + ".csv");
                MedavisTaskFactory.startExportTask(file, builder.toString());
            }
        } else {
            GuiHelper.warningMessage("Export", "Bitte w채hlen Sie ein Verzeichnis f체r den Export, der Dateiname wird vorgegeben!");
        }
    }//GEN-LAST:event_exportFileChooserActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

    }//GEN-LAST:event_jButton1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel allTablesLabel;
    private javax.swing.JPanel databaseMaintenancePanel;
    private javax.swing.JFileChooser exportFileChooser;
    private javax.swing.JPanel exportPanel;
    private javax.swing.JLabel exportServiceUrlLabel;
    private javax.swing.JTextField exportServiceUrlTextField;
    private javax.swing.JComboBox exportViewNameComboBox;
    private javax.swing.JButton jButton1;
    private javax.swing.JFileChooser medavisFileChooser;
    private javax.swing.JComboBox medavisFileTypeComboBox;
    private javax.swing.JPanel medavisFileUploadPanel;
    private javax.swing.JTabbedPane medavisPanel;
    private javax.swing.JFileChooser orbisFileChooser;
    private javax.swing.JComboBox orbisFileTypeComboBox;
    private javax.swing.JPanel orbisPanel;
    private javax.swing.JLabel serviceUrlLabel;
    private javax.swing.JTextField serviceUrlTextField;
    private javax.swing.JPanel settingsPanel;
    private javax.swing.JLabel uploadServiceUrlLabel;
    private javax.swing.JTextField uploadServiceUrlTextField;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
